# Copyright 2022 The OpenShift Pipelines Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: manual-approval-gate-controller-cluster-access
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: openshift-pipelines-manual-approval-gates
rules:
    # Controller needs cluster access to all of the CRDs that it is responsible for managing.
  - apiGroups: ["tekton.dev"]
    resources: ["runs", "taskruns", "customruns"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["tasks"]
    verbs: ["get", "list"]
  - apiGroups: ["tekton.dev"]
    resources: ["runs/status", "taskruns/status", "customruns/status"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["openshift-pipelines.org"]
    resources: ["approvaltasks"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["taskruns/finalizers", "pipelineruns/finalizers", "runs/finalizers", "customruns/finalizers"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: [ "tekton.dev" ]
    resources: [ "runs/finalizers" ]
    verbs: [ "get", "list", "create", "update", "delete", "patch", "watch" ]
  - apiGroups: ["openshift-pipelines.org"]
    resources: ["approvaltasks/status"]
    verbs: ["update", "patch", "create"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  # This is the access that the controller needs on a per-namespace basis.
  name: manual-approval-gate-controller-tenant-access
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: openshift-pipelines-manual-approval-gates
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: manual-approval-gate-webhook-cluster-access
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: openshift-pipelines-manual-approval-gates
rules:
  # The webhook needs to be able to list and update customresourcedefinitions,
  # mainly to update the webhook certificates.
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions", "customresourcedefinitions/status"]
    verbs: ["get", "list", "update", "patch", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    # The webhook performs a reconciliation on these two resources and continuously
    # updates configuration.
    resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
    # knative starts informers on these things, which is why we need get, list and watch.
    verbs: ["list", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    # This mutating webhook is responsible for applying defaults to tekton objects
    # as they are received.
    resourceNames: ["webhook.approvaltask.openshift.org"]
    # When there are changes to the configs or secrets, knative updates the mutatingwebhook config
    # with the updated certificates or the refreshed set of rules.
    verbs: ["get", "update"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations"]
    # validation.webhook.approvaltask.openshift.org performs schema validation when you, for example, create TaskLoops.
    resourceNames: ["validation.webhook.manual-approval.openshift-pipelines.org"]
    # When there are changes to the configs or secrets, knative updates the validatingwebhook config
    # with the updated certificates or the refreshed set of rules.
    verbs: ["get", "list", "update", "patch", "watch"]
  - apiGroups: [ "openshift-pipelines.org" ]
    resources: [ "approvaltasks" ]
    verbs: [ "get", "list", "create", "update", "delete", "patch", "watch" ]
  - apiGroups: ["openshift-pipelines.org"]
    resources: ["approvaltasks/status"]
    verbs: ["update", "patch", "create"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: manual-approval-gate-leader-election
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: openshift-pipelines-manual-approval-gates
rules:
  # We uses leases for leaderelection
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
