From bbd540e1e5715cab2b41a4003d6843bb59b666b8 Mon Sep 17 00:00:00 2001
From: shverma <shverma@redhat.com>
Date: Fri, 19 Sep 2025 15:10:03 +0530
Subject: [PATCH] Add a preupgrade function to update PAC settings

This adds a pre-upgrade function that updates Tekton Hub catalog details to
Artifact Hub catalog details, since previous versions of Pipelines-as-Code
settings stored Tekton Hub catalog information

Signed-off-by: Shiv Verma <shverma@redhat.com>
---
 .../tektonconfig/upgrade/pre_upgrade.go       |  66 ++++++
 .../tektonconfig/upgrade/pre_upgrade_test.go  | 203 ++++++++++++++++++
 .../shared/tektonconfig/upgrade/upgrade.go    |   3 +-
 3 files changed, 271 insertions(+), 1 deletion(-)

diff --git a/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade.go b/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade.go
index 30cc79d214..24b2572827 100644
--- a/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade.go
+++ b/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade.go
@@ -151,3 +151,69 @@ func preUpgradeTektonPruner(ctx context.Context, logger *zap.SugaredLogger, k8sC
 	_, err = operatorClient.OperatorV1alpha1().TektonConfigs().Update(ctx, tc, metav1.UpdateOptions{})
 	return err
 }
+
+// preUpgradePipelinesAsCodeArtifacts checks if Pipelines as Code is installed and updates
+// the hub catalog settings to use the artifact hub URL
+func preUpgradePipelinesAsCodeArtifacts(ctx context.Context, logger *zap.SugaredLogger, k8sClient kubernetes.Interface, operatorClient versioned.Interface, restConfig *rest.Config) error {
+	// Only run on OpenShift platform
+	if !v1alpha1.IsOpenShiftPlatform() {
+		logger.Infof("Not on OpenShift platform, skipping Pipelines as Code artifact upgrade")
+		return nil
+	}
+
+	// Get TektonConfig CR
+	logger.Infof("Performing preupgrade for Pipelines as Code artifact settings")
+	tc, err := operatorClient.OperatorV1alpha1().TektonConfigs().Get(ctx, v1alpha1.ConfigResourceName, metav1.GetOptions{})
+	if err != nil {
+		if apierrs.IsNotFound(err) {
+			logger.Infof("TektonConfig CR not found, skipping Pipelines as Code artifact upgrade")
+			return nil
+		}
+		logger.Errorw("error on getting TektonConfig CR", err)
+		return err
+	}
+
+	// Check if Pipelines as Code is enabled
+	if tc.Spec.Platforms.OpenShift.PipelinesAsCode == nil ||
+		tc.Spec.Platforms.OpenShift.PipelinesAsCode.Enable == nil ||
+		!*tc.Spec.Platforms.OpenShift.PipelinesAsCode.Enable {
+		logger.Infof("Pipelines as Code is not enabled, skipping artifact upgrade")
+		return nil
+	}
+
+	// Initialize settings if nil
+	if tc.Spec.Platforms.OpenShift.PipelinesAsCode.PACSettings.Settings == nil {
+		tc.Spec.Platforms.OpenShift.PipelinesAsCode.PACSettings.Settings = make(map[string]string)
+	}
+
+	// Fetch PAC settings
+	settings := tc.Spec.Platforms.OpenShift.PipelinesAsCode.PACSettings.Settings
+
+	// Set hub-catalog-type to artifacthub if not already set or if it's set to tektonhub
+	if catalogType, exists := settings["hub-catalog-type"]; !exists || catalogType == "tektonhub" {
+		settings["hub-catalog-type"] = "artifacthub"
+		logger.Infof("Updated hub-catalog-type to artifacthub")
+	}
+
+	// Set hub-url to https://artifacthub.io if not already set or if it's set to the old API URL
+	if hubURL, exists := settings["hub-url"]; !exists || hubURL == "https://artifacthub.io/api/v1" || hubURL == "https://api.hub.tekton.dev/v1" {
+		settings["hub-url"] = "https://artifacthub.io"
+		logger.Infof("Updated hub-url to https://artifacthub.io")
+	}
+
+	// remove hub-catalog-name key from setting if found
+	if _, exists := settings["hub-catalog-name"]; exists {
+		delete(settings, "hub-catalog-name")
+		logger.Infof("Removed hub-catalog-name field")
+	}
+
+	// Update the TektonConfig CR
+	_, err = operatorClient.OperatorV1alpha1().TektonConfigs().Update(ctx, tc, metav1.UpdateOptions{})
+	if err != nil {
+		logger.Errorw("error updating TektonConfig CR with artifact settings", err)
+		return err
+	}
+
+	logger.Infof("Successfully updated Pipelines as Code artifact settings")
+	return nil
+}
diff --git a/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade_test.go b/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade_test.go
index 184679d695..9532c954f7 100644
--- a/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade_test.go
+++ b/pkg/reconciler/shared/tektonconfig/upgrade/pre_upgrade_test.go
@@ -193,3 +193,206 @@ func TestPreUpgradeTektonPruner(t *testing.T) {
 	assert.Equal(t, false, *tc.Spec.TektonPruner.Disabled)
 	assert.Equal(t, int32(88), *tc.Spec.TektonPruner.GlobalConfig.TTLSecondsAfterFinished)
 }
+
+func TestPreUpgradePipelinesAsCodeArtifacts(t *testing.T) {
+	t.Setenv("PLATFORM", "openshift")
+
+	tests := []struct {
+		name                   string
+		tc                     *v1alpha1.TektonConfig
+		expectedHubCatalogType string
+		expectedHubURL         string
+		shouldUpdate           bool
+	}{
+		{
+			name: "PAC enabled with no settings - should update",
+			tc: &v1alpha1.TektonConfig{
+				ObjectMeta: metav1.ObjectMeta{
+					Name: v1alpha1.ConfigResourceName,
+				},
+				Spec: v1alpha1.TektonConfigSpec{
+					Platforms: v1alpha1.Platforms{
+						OpenShift: v1alpha1.OpenShift{
+							PipelinesAsCode: &v1alpha1.PipelinesAsCode{
+								Enable: ptr.Bool(true),
+							},
+						},
+					},
+				},
+			},
+			expectedHubCatalogType: "artifacthub",
+			expectedHubURL:         "https://artifacthub.io",
+			shouldUpdate:           true,
+		},
+		{
+			name: "PAC enabled with tektonhub settings - should update",
+			tc: &v1alpha1.TektonConfig{
+				ObjectMeta: metav1.ObjectMeta{
+					Name: v1alpha1.ConfigResourceName,
+				},
+				Spec: v1alpha1.TektonConfigSpec{
+					Platforms: v1alpha1.Platforms{
+						OpenShift: v1alpha1.OpenShift{
+							PipelinesAsCode: &v1alpha1.PipelinesAsCode{
+								Enable: ptr.Bool(true),
+								PACSettings: v1alpha1.PACSettings{
+									Settings: map[string]string{
+										"hub-catalog-type": "tektonhub",
+										"hub-url":          "https://api.hub.tekton.dev/v1",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+			expectedHubCatalogType: "artifacthub",
+			expectedHubURL:         "https://artifacthub.io",
+			shouldUpdate:           true,
+		},
+		{
+			name: "PAC enabled with old artifacthub API URL - should update",
+			tc: &v1alpha1.TektonConfig{
+				ObjectMeta: metav1.ObjectMeta{
+					Name: v1alpha1.ConfigResourceName,
+				},
+				Spec: v1alpha1.TektonConfigSpec{
+					Platforms: v1alpha1.Platforms{
+						OpenShift: v1alpha1.OpenShift{
+							PipelinesAsCode: &v1alpha1.PipelinesAsCode{
+								Enable: ptr.Bool(true),
+								PACSettings: v1alpha1.PACSettings{
+									Settings: map[string]string{
+										"hub-catalog-type": "artifacthub",
+										"hub-url":          "https://artifacthub.io/api/v1",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+			expectedHubCatalogType: "artifacthub",
+			expectedHubURL:         "https://artifacthub.io",
+			shouldUpdate:           true,
+		},
+		{
+			name: "PAC enabled with correct settings - should not update",
+			tc: &v1alpha1.TektonConfig{
+				ObjectMeta: metav1.ObjectMeta{
+					Name: v1alpha1.ConfigResourceName,
+				},
+				Spec: v1alpha1.TektonConfigSpec{
+					Platforms: v1alpha1.Platforms{
+						OpenShift: v1alpha1.OpenShift{
+							PipelinesAsCode: &v1alpha1.PipelinesAsCode{
+								Enable: ptr.Bool(true),
+								PACSettings: v1alpha1.PACSettings{
+									Settings: map[string]string{
+										"hub-catalog-type": "artifacthub",
+										"hub-url":          "https://artifacthub.io",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+			expectedHubCatalogType: "artifacthub",
+			expectedHubURL:         "https://artifacthub.io",
+			shouldUpdate:           false,
+		},
+		{
+			name: "PAC enabled with hub-catalog-name - should update and remove hub-catalog-name",
+			tc: &v1alpha1.TektonConfig{
+				ObjectMeta: metav1.ObjectMeta{
+					Name: v1alpha1.ConfigResourceName,
+				},
+				Spec: v1alpha1.TektonConfigSpec{
+					Platforms: v1alpha1.Platforms{
+						OpenShift: v1alpha1.OpenShift{
+							PipelinesAsCode: &v1alpha1.PipelinesAsCode{
+								Enable: ptr.Bool(true),
+								PACSettings: v1alpha1.PACSettings{
+									Settings: map[string]string{
+										"hub-catalog-type": "artifacthub",
+										"hub-url":          "https://artifacthub.io",
+										"hub-catalog-name": "tekton",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+			expectedHubCatalogType: "artifacthub",
+			expectedHubURL:         "https://artifacthub.io",
+			shouldUpdate:           true,
+		},
+		{
+			name: "PAC enabled with tektonhub and hub-catalog-name - should update all",
+			tc: &v1alpha1.TektonConfig{
+				ObjectMeta: metav1.ObjectMeta{
+					Name: v1alpha1.ConfigResourceName,
+				},
+				Spec: v1alpha1.TektonConfigSpec{
+					Platforms: v1alpha1.Platforms{
+						OpenShift: v1alpha1.OpenShift{
+							PipelinesAsCode: &v1alpha1.PipelinesAsCode{
+								Enable: ptr.Bool(true),
+								PACSettings: v1alpha1.PACSettings{
+									Settings: map[string]string{
+										"hub-catalog-type": "tektonhub",
+										"hub-url":          "https://api.hub.tekton.dev/v1",
+										"hub-catalog-name": "tekton",
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+			expectedHubCatalogType: "artifacthub",
+			expectedHubURL:         "https://artifacthub.io",
+			shouldUpdate:           true,
+		},
+	}
+
+	ctx := context.TODO()
+	logger := logging.FromContext(ctx).Named("unit-test")
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			operatorClient := operatorFake.NewSimpleClientset()
+			k8sClient := k8sFake.NewSimpleClientset()
+
+			err := preUpgradePipelinesAsCodeArtifacts(ctx, logger, k8sClient, operatorClient, nil)
+			assert.NoError(t, err)
+
+			// create tektonConfig CR
+			if tt.tc != nil {
+				_, err = operatorClient.OperatorV1alpha1().TektonConfigs().Create(ctx, tt.tc, metav1.CreateOptions{})
+				assert.NoError(t, err)
+			}
+
+			// run the upgrade function
+			err = preUpgradePipelinesAsCodeArtifacts(ctx, logger, k8sClient, operatorClient, nil)
+			assert.NoError(t, err)
+
+			if tt.shouldUpdate {
+				tcData, err := operatorClient.OperatorV1alpha1().TektonConfigs().Get(ctx, v1alpha1.ConfigResourceName, metav1.GetOptions{})
+				assert.NoError(t, err)
+				assert.NotNil(t, tcData.Spec.Platforms.OpenShift.PipelinesAsCode)
+				assert.NotNil(t, tcData.Spec.Platforms.OpenShift.PipelinesAsCode.PACSettings.Settings)
+
+				settings := tcData.Spec.Platforms.OpenShift.PipelinesAsCode.PACSettings.Settings
+				assert.Equal(t, tt.expectedHubCatalogType, settings["hub-catalog-type"])
+				assert.Equal(t, tt.expectedHubURL, settings["hub-url"])
+
+				// Verify that hub-catalog-name is removed if it existed in the original settings
+				_, hubCatalogNameExists := settings["hub-catalog-name"]
+				assert.False(t, hubCatalogNameExists, "hub-catalog-name should be removed from settings")
+			}
+		})
+	}
+}
diff --git a/pkg/reconciler/shared/tektonconfig/upgrade/upgrade.go b/pkg/reconciler/shared/tektonconfig/upgrade/upgrade.go
index fd87c8a043..fc7e59aaa2 100644
--- a/pkg/reconciler/shared/tektonconfig/upgrade/upgrade.go
+++ b/pkg/reconciler/shared/tektonconfig/upgrade/upgrade.go
@@ -37,7 +37,8 @@ var (
 		// Todo: Remove the deleteTektonResultsTLSSecret upgrade function in next operator release
 		deleteTektonResultsTLSSecret, // upgrade #5: deletes default tekton results tls certificate
 		// TODO: Remove the preUpgradeTektonPruner upgrade function in next operator release
-		preUpgradeTektonPruner, // upgrade #5: pre upgrade tekton pruner
+		preUpgradeTektonPruner,             // upgrade #5: pre upgrade tekton pruner
+		preUpgradePipelinesAsCodeArtifacts, // upgrade #6: update Pipelines as Code artifact hub settings
 	}
 
 	// post upgrade functions
