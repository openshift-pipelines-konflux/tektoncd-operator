From b41f99aead52b2767d20f09ae10e20fcb50e7fd1 Mon Sep 17 00:00:00 2001
From: Pramod Bindal <prbindal@redhat.com>
Date: Wed, 26 Mar 2025 22:15:09 +0530
Subject: [PATCH 2/2] Add TektonConfig for Pruner

---
 Makefile                                      |   2 +-
 config/kubernetes/base/operator.yaml          |   2 +-
 hack/fetch-releases.sh                        |   2 +-
 .../operator/v1alpha1/tektonconfig_types.go   |   6 +-
 .../operator/v1alpha1/tektonpruner_types.go   |  11 +-
 pkg/reconciler/common/transformers.go         |   1 -
 .../{finalizer.go => finalize.go}             |   0
 .../{reconciler.go => reconcile.go}           |   0
 .../{transformer.go => transform.go}          |   1 -
 .../shared/tektonconfig/pruner/pruner.go      | 183 ++++++++++++++++++
 .../shared/tektonconfig/tektonconfig.go       |  13 ++
 11 files changed, 211 insertions(+), 10 deletions(-)
 rename pkg/reconciler/kubernetes/tektonpruner/{finalizer.go => finalize.go} (100%)
 rename pkg/reconciler/kubernetes/tektonpruner/{reconciler.go => reconcile.go} (100%)
 rename pkg/reconciler/kubernetes/tektonpruner/{transformer.go => transform.go} (99%)
 create mode 100644 pkg/reconciler/shared/tektonconfig/pruner/pruner.go

diff --git a/Makefile b/Makefile
index cf5b6f6a4..ce84f352a 100644
--- a/Makefile
+++ b/Makefile
@@ -114,7 +114,7 @@ get-releases: |
 apply: | $(KO) $(KUSTOMIZE) get-releases ; $(info $(M) ko apply on $(TARGET)) @ ## Apply config to the current cluster
 	@ ## --load-restrictor LoadRestrictionsNone is needed in kustomize build as files which not in child tree of kustomize base are pulled
 	@ ## https://github.com/kubernetes-sigs/kustomize/issues/766
-	$Q $(KUSTOMIZE) build --load-restrictor LoadRestrictionsNone config/$(TARGET)/overlays/default | $(KO) apply $(KO_FLAGS) $(PLATFORM) -f -
+	$Q $(KUSTOMIZE) build --load-restrictor LoadRestrictionsNone config/$(TARGET)/overlays/default | $(KO) apply $(KO_FLAGS) $(PLATFORM) -Bf -
 
 .PHONY: apply-cr
 apply-cr: | ; $(info $(M) apply CRs on $(TARGET)) @ ## Apply the CRs to the current cluster
diff --git a/config/kubernetes/base/operator.yaml b/config/kubernetes/base/operator.yaml
index 27b6f4acb..ba7869380 100644
--- a/config/kubernetes/base/operator.yaml
+++ b/config/kubernetes/base/operator.yaml
@@ -53,7 +53,7 @@ spec:
         - name: IMAGE_JOB_PRUNER_TKN
           value: ghcr.io/tektoncd/plumbing/tkn@sha256:233de6c8b8583a34c2379fa98d42dba739146c9336e8d41b66030484357481ed
         - name: IMAGE_PRUNER_CONTROLLER
-          value: quay.io/openshift-pipeline/pipelines-tektoncd-pruner-controller-rhel9:next
+          value: quay.io/openshift-pipeline/pipelines-pruner-controller-rhel9:main
         - name: METRICS_DOMAIN
           value: tekton.dev/operator
         - name: VERSION
diff --git a/hack/fetch-releases.sh b/hack/fetch-releases.sh
index 45fc18b28..1cffea274 100755
--- a/hack/fetch-releases.sh
+++ b/hack/fetch-releases.sh
@@ -100,7 +100,7 @@ release_yaml() {
     fi
 
     if [[ ${comp} == "dashboard" ]]; then
-      sed -i '/aggregationRule/,+3d' ${dest}
+      sed -i "" '/aggregationRule/,+3d' ${dest}
     fi
 
     echo "Info: Added $comp/$releaseFileName:$version release yaml !!"
diff --git a/pkg/apis/operator/v1alpha1/tektonconfig_types.go b/pkg/apis/operator/v1alpha1/tektonconfig_types.go
index ab1822b87..8e4f5eb22 100644
--- a/pkg/apis/operator/v1alpha1/tektonconfig_types.go
+++ b/pkg/apis/operator/v1alpha1/tektonconfig_types.go
@@ -88,8 +88,10 @@ type TektonConfigSpec struct {
 	Config Config `json:"config,omitempty"`
 	// Pruner holds the prune config
 	// +optional
-	Pruner     Prune `json:"pruner,omitempty"`
-	CommonSpec `json:",inline"`
+	Pruner Prune `json:"pruner,omitempty"`
+	// New EventBasedPruner which provides more granular control over TaskRun and PipelineRuns
+	TektonPruner Pruner `json:"tektonpruner,omitempty"`
+	CommonSpec   `json:",inline"`
 	// Addon holds the addons config
 	// +optional
 	Addon Addon `json:"addon,omitempty"`
diff --git a/pkg/apis/operator/v1alpha1/tektonpruner_types.go b/pkg/apis/operator/v1alpha1/tektonpruner_types.go
index 089dfdaea..70b535b50 100644
--- a/pkg/apis/operator/v1alpha1/tektonpruner_types.go
+++ b/pkg/apis/operator/v1alpha1/tektonpruner_types.go
@@ -34,12 +34,13 @@ var (
 type TektonPruner struct {
 	metav1.TypeMeta   `json:",inline"`
 	metav1.ObjectMeta `json:"metadata,omitempty"`
-
-	Spec   TektonPrunerSpec   `json:"spec,omitempty"`
-	Status TektonPrunerStatus `json:"status,omitempty"`
+	Spec              TektonPrunerSpec   `json:"spec,omitempty"`
+	Status            TektonPrunerStatus `json:"status,omitempty"`
 }
 
 type Pruner struct {
+	// enable or disable TektonPruner Component
+	Disabled bool `json:"disabled"`
 	// options holds additions fields and these fields will be updated on the manifests
 	Options AdditionalOptions `json:"options"`
 }
@@ -55,6 +56,10 @@ type TektonPrunerList struct {
 type TektonPrunerSpec struct {
 	CommonSpec `json:",inline"`
 	Pruner     `json:",inline"`
+
+	// Config holds the configuration for resources created by TektonPruner
+	// +optional
+	Config Config `json:"config,omitempty"`
 }
 
 // TektonPrunerStatus defines the observed state of TektonPruner
diff --git a/pkg/reconciler/common/transformers.go b/pkg/reconciler/common/transformers.go
index b32c73be5..c21c3b964 100644
--- a/pkg/reconciler/common/transformers.go
+++ b/pkg/reconciler/common/transformers.go
@@ -191,7 +191,6 @@ func DeploymentImages(images map[string]string) mf.Transformer {
 		if u.GetKind() != "Deployment" {
 			return nil
 		}
-
 		d := &appsv1.Deployment{}
 		err := runtime.DefaultUnstructuredConverter.FromUnstructured(u.Object, d)
 		if err != nil {
diff --git a/pkg/reconciler/kubernetes/tektonpruner/finalizer.go b/pkg/reconciler/kubernetes/tektonpruner/finalize.go
similarity index 100%
rename from pkg/reconciler/kubernetes/tektonpruner/finalizer.go
rename to pkg/reconciler/kubernetes/tektonpruner/finalize.go
diff --git a/pkg/reconciler/kubernetes/tektonpruner/reconciler.go b/pkg/reconciler/kubernetes/tektonpruner/reconcile.go
similarity index 100%
rename from pkg/reconciler/kubernetes/tektonpruner/reconciler.go
rename to pkg/reconciler/kubernetes/tektonpruner/reconcile.go
diff --git a/pkg/reconciler/kubernetes/tektonpruner/transformer.go b/pkg/reconciler/kubernetes/tektonpruner/transform.go
similarity index 99%
rename from pkg/reconciler/kubernetes/tektonpruner/transformer.go
rename to pkg/reconciler/kubernetes/tektonpruner/transform.go
index d71351021..29a25d2a6 100644
--- a/pkg/reconciler/kubernetes/tektonpruner/transformer.go
+++ b/pkg/reconciler/kubernetes/tektonpruner/transform.go
@@ -18,7 +18,6 @@ package tektonpruner
 
 import (
 	"context"
-
 	mf "github.com/manifestival/manifestival"
 	"github.com/tektoncd/operator/pkg/apis/operator/v1alpha1"
 	"github.com/tektoncd/operator/pkg/reconciler/common"
diff --git a/pkg/reconciler/shared/tektonconfig/pruner/pruner.go b/pkg/reconciler/shared/tektonconfig/pruner/pruner.go
new file mode 100644
index 000000000..1d77627e0
--- /dev/null
+++ b/pkg/reconciler/shared/tektonconfig/pruner/pruner.go
@@ -0,0 +1,183 @@
+/*
+Copyright 2021 The Tekton Authors
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package pruner
+
+import (
+	"context"
+	"fmt"
+	"reflect"
+	"strings"
+
+	"github.com/tektoncd/operator/pkg/apis/operator/v1alpha1"
+	op "github.com/tektoncd/operator/pkg/client/clientset/versioned/typed/operator/v1alpha1"
+	apierrs "k8s.io/apimachinery/pkg/api/errors"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"knative.dev/pkg/apis"
+)
+
+func EnsureTektonPrunerExists(ctx context.Context, clients op.TektonPrunerInterface, tt *v1alpha1.TektonPruner) (*v1alpha1.TektonPruner, error) {
+	ttCR, err := GetPruner(ctx, clients, v1alpha1.PrunerResourceName)
+	if err != nil {
+		if !apierrs.IsNotFound(err) {
+			return nil, err
+		}
+		if err := CreatePruner(ctx, clients, tt); err != nil {
+			return nil, err
+		}
+		return nil, v1alpha1.RECONCILE_AGAIN_ERR
+	}
+
+	ttCR, err = UpdatePruner(ctx, ttCR, tt, clients)
+	if err != nil {
+		return nil, err
+	}
+
+	ok, err := isTektonPrunerReady(ttCR, err)
+	if err != nil {
+		return nil, err
+	}
+	if !ok {
+		return nil, v1alpha1.RECONCILE_AGAIN_ERR
+	}
+
+	return ttCR, err
+}
+
+func GetPruner(ctx context.Context, clients op.TektonPrunerInterface, name string) (*v1alpha1.TektonPruner, error) {
+	return clients.Get(ctx, name, metav1.GetOptions{})
+}
+
+func GetTektonPrunerCR(config *v1alpha1.TektonConfig, operatorVersion string) *v1alpha1.TektonPruner {
+	ownerRef := *metav1.NewControllerRef(config, config.GroupVersionKind())
+	return &v1alpha1.TektonPruner{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:            v1alpha1.PrunerResourceName,
+			OwnerReferences: []metav1.OwnerReference{ownerRef},
+			Labels: map[string]string{
+				v1alpha1.ReleaseVersionKey: operatorVersion,
+			},
+		},
+		Spec: v1alpha1.TektonPrunerSpec{
+			CommonSpec: v1alpha1.CommonSpec{
+				TargetNamespace: config.Spec.TargetNamespace,
+			},
+			Config: config.Spec.Config,
+			Pruner: config.Spec.TektonPruner,
+		},
+	}
+}
+
+func CreatePruner(ctx context.Context, clients op.TektonPrunerInterface, tt *v1alpha1.TektonPruner) error {
+	_, err := clients.Create(ctx, tt, metav1.CreateOptions{})
+	return err
+}
+
+func UpdatePruner(ctx context.Context, old *v1alpha1.TektonPruner, new *v1alpha1.TektonPruner, clients op.TektonPrunerInterface) (*v1alpha1.TektonPruner, error) {
+	// if the pruner spec is changed then update the instance
+	updated := false
+	// initialize labels(map) object
+	if old.ObjectMeta.Labels == nil {
+		old.ObjectMeta.Labels = map[string]string{}
+	}
+
+	if new.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey] != old.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey] {
+		old.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey] = new.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey]
+		updated = true
+	}
+
+	if new.Spec.TargetNamespace != old.Spec.TargetNamespace {
+		old.Spec.TargetNamespace = new.Spec.TargetNamespace
+		updated = true
+	}
+
+	if !reflect.DeepEqual(old.Spec.Pruner, new.Spec.Pruner) {
+		old.Spec.Pruner = new.Spec.Pruner
+		updated = true
+	}
+
+	if !reflect.DeepEqual(old.Spec.Config, new.Spec.Config) {
+		old.Spec.Config = new.Spec.Config
+		updated = true
+	}
+
+	if old.ObjectMeta.OwnerReferences == nil {
+		old.ObjectMeta.OwnerReferences = new.ObjectMeta.OwnerReferences
+		updated = true
+	}
+
+	oldLabels, oldHasLabels := old.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey]
+	newLabels, newHasLabels := new.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey]
+	if !oldHasLabels || (newHasLabels && oldLabels != newLabels) {
+		old.ObjectMeta.Labels[v1alpha1.ReleaseVersionKey] = newLabels
+		updated = true
+	}
+
+	if updated {
+		_, err := clients.Update(ctx, old, metav1.UpdateOptions{})
+		if err != nil {
+			return nil, err
+		}
+		return nil, v1alpha1.RECONCILE_AGAIN_ERR
+	}
+	return old, nil
+}
+
+// isTektonPrunerReady will check the status conditions of the TektonPruner and return true if the TektonPruner is ready.
+func isTektonPrunerReady(s *v1alpha1.TektonPruner, err error) (bool, error) {
+	if s.GetStatus() != nil && s.GetStatus().GetCondition(apis.ConditionReady) != nil {
+		if strings.Contains(s.GetStatus().GetCondition(apis.ConditionReady).Message, v1alpha1.UpgradePending) {
+			return false, v1alpha1.DEPENDENCY_UPGRADE_PENDING_ERR
+		}
+	}
+	return s.Status.IsReady(), err
+}
+
+func GetTektonConfig() *v1alpha1.TektonConfig {
+	return &v1alpha1.TektonConfig{
+		ObjectMeta: metav1.ObjectMeta{
+			Name: v1alpha1.ConfigResourceName,
+		},
+		Spec: v1alpha1.TektonConfigSpec{
+			Profile: "all",
+			CommonSpec: v1alpha1.CommonSpec{
+				TargetNamespace: "tekton-pipelines",
+			},
+		},
+	}
+}
+
+func EnsureTektonPrunerCRNotExists(ctx context.Context, clients op.TektonPrunerInterface) error {
+	if _, err := GetPruner(ctx, clients, v1alpha1.PrunerResourceName); err != nil {
+		if apierrs.IsNotFound(err) {
+			// TektonPruner CR is gone, hence return nil
+			return nil
+		}
+		return err
+	}
+	// if the Get was successful, try deleting the CR
+	if err := clients.Delete(ctx, v1alpha1.PrunerResourceName, metav1.DeleteOptions{}); err != nil {
+		if apierrs.IsNotFound(err) {
+			// TektonPruner CR is gone, hence return nil
+			return nil
+		}
+		return fmt.Errorf("TektonPruner %q failed to delete: %v", v1alpha1.PrunerResourceName, err)
+	}
+	// if the Delete API call was success,
+	// then return requeue_event
+	// so that in a subsequent reconcile call the absence of the CR is verified by one of the 2 checks above
+	return v1alpha1.RECONCILE_AGAIN_ERR
+}
diff --git a/pkg/reconciler/shared/tektonconfig/tektonconfig.go b/pkg/reconciler/shared/tektonconfig/tektonconfig.go
index e125afc49..0788939db 100644
--- a/pkg/reconciler/shared/tektonconfig/tektonconfig.go
+++ b/pkg/reconciler/shared/tektonconfig/tektonconfig.go
@@ -19,6 +19,7 @@ package tektonconfig
 import (
 	"context"
 	"fmt"
+	"github.com/tektoncd/operator/pkg/reconciler/shared/tektonconfig/pruner"
 
 	mf "github.com/manifestival/manifestival"
 	"github.com/tektoncd/operator/pkg/apis/operator/v1alpha1"
@@ -202,6 +203,18 @@ func (r *Reconciler) ReconcileKind(ctx context.Context, tc *v1alpha1.TektonConfi
 			return v1alpha1.REQUEUE_EVENT_AFTER
 		}
 	}
+	if !tc.Spec.TektonPruner.Disabled {
+		tektonPruner := pruner.GetTektonPrunerCR(tc, r.operatorVersion)
+		if _, err = pruner.EnsureTektonPrunerExists(ctx, r.operatorClientSet.OperatorV1alpha1().TektonPruners(), tektonPruner); err != nil {
+			tc.Status.MarkComponentNotReady(fmt.Sprintf("TektonPruner %s", err.Error()))
+			return v1alpha1.REQUEUE_EVENT_AFTER
+		}
+	} else {
+		if err := pruner.EnsureTektonPrunerCRNotExists(ctx, r.operatorClientSet.OperatorV1alpha1().TektonPruners()); err != nil {
+			tc.Status.MarkComponentNotReady(fmt.Sprintf("TektonPruner: %s", err.Error()))
+			return v1alpha1.REQUEUE_EVENT_AFTER
+		}
+	}
 
 	// reconcile pruner installerSet
 	if !tc.Spec.Pruner.Disabled {
-- 
2.39.5 (Apple Git-154)

